import streamlit as st
import random
from gtts import gTTS

# ---------------------------
# Vokabelliste (Beispiel, 10 W√∂rter)
# ---------------------------
vocab = [
    {"ru": "–ø—Ä–∏–≤–µ—Ç", "de": "hallo"},
    {"ru": "–ø–æ–∫–∞", "de": "tsch√ºss"},
    {"ru": "—Å–ø–∞—Å–∏–±–æ", "de": "danke"},
    {"ru": "–¥–∞", "de": "ja"},
    {"ru": "–Ω–µ—Ç", "de": "nein"},
    {"ru": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "de": "bitte"},
    {"ru": "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "de": "guten Morgen"},
    {"ru": "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "de": "guten Abend"},
    {"ru": "–∏–∑–≤–∏–Ω–∏—Ç–µ", "de": "Entschuldigung"},
    {"ru": "–∫–∞–∫ –¥–µ–ª–∞?", "de": "wie geht's?"}
]

# ---------------------------
# Hilfsfunktionen
# ---------------------------
def play_audio(text, lang="ru"):
    tts = gTTS(text, lang=lang)
    tts.save("audio.mp3")
    audio_file = open("audio.mp3", "rb")
    audio_bytes = audio_file.read()
    st.audio(audio_bytes, format="audio/mp3")

def get_random_choices(correct, all_words, key):
    choices = [correct]
    while len(choices) < 4:
        word = random.choice(all_words)[key]
        if word not in choices:
            choices.append(word)
    random.shuffle(choices)
    return choices

# ---------------------------
# Session State
# ---------------------------
if "index" not in st.session_state:
    st.session_state.index = 0
    st.session_state.correct = 0
    st.session_state.total = 0
    st.session_state.streak = 0
    st.session_state.best_streak = 0
    st.session_state.mode = "Eingabe"

# ---------------------------
# UI: Einstellungen
# ---------------------------
st.title("üá∑üá∫ Russisch-Vokabeltrainer")
st.sidebar.title("Einstellungen")
num_cards = st.sidebar.slider("Wie viele Vokabeln lernen?", 5, len(vocab), 10)
mode = st.sidebar.radio("Lernmodus", ["Eingabe", "Multiple Choice"])
from_lang = st.sidebar.radio("Was wird gezeigt?", ["üá∑üá∫ Russisch", "üá©üá™ Deutsch"])
st.session_state.mode = mode

# ---------------------------
# Lernlogik
# ---------------------------
vocab_subset = vocab[:num_cards]
current_index = st.session_state.index % len(vocab_subset)
current_word = vocab_subset[current_index]

source = "ru" if from_lang == "üá∑üá∫ Russisch" else "de"
target = "de" if source == "ru" else "ru"

source_word = current_word.get(source, "[FEHLT]")
target_word = current_word.get(target, "[FEHLT]")

st.markdown(f"### {source_word}")
if st.button("üîä Aussprache anh√∂ren"):
    play_audio(source_word, lang=source)

if st.session_state.mode == "Eingabe":
    user_input = st.text_input("√úbersetzung eingeben:")
    if st.button("Pr√ºfen"):
        st.session_state.total += 1
        if user_input.strip().lower() == target_word.lower():
            st.success("‚úÖ Richtig!")
            st.session_state.correct += 1
            st.session_state.streak += 1
            st.session_state.best_streak = max(st.session_state.streak, st.session_state.best_streak)
        else:
            st.error(f"‚ùå Falsch. Richtig w√§re: {target_word}")
            st.session_state.streak = 0
        st.session_state.index += 1
        st.experimental_rerun()

elif st.session_state.mode == "Multiple Choice":
    choices = get_random_choices(target_word, vocab_subset, target)
    answer = st.radio("W√§hle die richtige √úbersetzung:", choices)
    if st.button("Antwort pr√ºfen"):
        st.session_state.total += 1
        if answer == target_word:
            st.success("‚úÖ Richtig!")
            st.session_state.correct += 1
            st.session_state.streak += 1
            st.session_state.best_streak = max(st.session_state.streak, st.session_state.best_streak)
        else:
            st.error(f"‚ùå Falsch. Richtig w√§re: {target_word}")
            st.session_state.streak = 0
        st.session_state.index += 1
        st.experimental_rerun()

# ---------------------------
# Fortschrittsanzeige
# ---------------------------
st.sidebar.markdown(f"**Fortschritt**: {st.session_state.correct}/{st.session_state.total} korrekt")
st.sidebar.markdown(f"üî• Streak: {st.session_state.streak}")
st.sidebar.markdown(f"üèÜ Rekord: {st.session_state.best_streak}")
