# Updated version for mobile use and improved audio playback using playsound
import random
import tkinter as tk
from tkinter import messagebox
from gtts import gTTS
from playsound import playsound
import os
import tempfile

# --- Data: 100 common Russian words with English translations ---
vocab = [
    ("–∏", "and"), ("–≤", "in"), ("–Ω–µ", "not"), ("–æ–Ω", "he"), ("–Ω–∞", "on, at"),
    ("—è", "I"), ("—á—Ç–æ", "what, that"), ("—Ç–æ—Ç", "that"), ("–±—ã—Ç—å", "to be"),
    ("—Å", "with"), ("–∞", "but"), ("–≤–µ—Å—å", "all"), ("—ç—Ç–æ", "this, it"),
    ("–∫–∞–∫", "how, like"), ("–æ–Ω–∞", "she"), ("–ø–æ", "along, by, according to"),
    ("–Ω–æ", "but"), ("–æ–Ω–∏", "they"), ("–∫", "to"), ("—É", "at, by"),
    ("—Ç—ã", "you (informal)"), ("–∏–∑", "from, out of"), ("–º—ã", "we"),
    ("–∑–∞", "behind, for"), ("–≤—ã", "you (formal or plural)"), ("—Ç–∞–∫", "so, thus"),
    ("–∂–µ", "same, also"), ("–æ—Ç", "from, of"), ("—Å–∫–∞–∑–∞—Ç—å", "to say"),
    ("—ç—Ç–æ—Ç", "this"), ("–∫–æ—Ç–æ—Ä—ã–π", "which, who"), ("–º–æ—á—å", "can, to be able"),
    ("—á–µ–ª–æ–≤–µ–∫", "person"), ("–æ", "about"), ("–æ–¥–∏–Ω", "one"), ("–µ—â—ë", "still, yet"),
    ("–±—ã", "would"), ("—Ç–∞–∫–æ–π", "such"), ("—Ç–æ–ª—å–∫–æ", "only"), ("—Å–µ–±—è", "oneself"),
    ("—Å–≤–æ—ë", "one's own"), ("–∫–∞–∫–æ–π", "what kind, which"), ("–∫–æ–≥–¥–∞", "when"),
    ("—É–∂–µ", "already"), ("–¥–ª—è", "for"), ("–≤–æ—Ç", "here is, there is"),
    ("–∫—Ç–æ", "who"), ("–¥–∞", "yes"), ("–≥–æ–≤–æ—Ä–∏—Ç—å", "to speak, say"),
    ("–≥–æ–¥", "year"), ("–∑–Ω–∞—Ç—å", "to know"), ("–º–æ–π", "my"), ("–¥–æ", "until, before"),
    ("–∏–ª–∏", "or"), ("–µ—Å–ª–∏", "if"), ("–≤—Ä–µ–º—è", "time"), ("—Ä—É–∫–∞", "hand"),
    ("–Ω–µ—Ç", "no, not"), ("—Å–∞–º—ã–π", "most, the very"), ("–Ω–∏", "neither, nor"),
    ("—Å—Ç–∞—Ç—å", "to become"), ("–±–æ–ª—å—à–æ–π", "big"), ("–¥–∞–∂–µ", "even"),
    ("–¥—Ä—É–≥–æ–π", "other"), ("–Ω–∞—à", "our"), ("–ø–æ–¥", "under"), ("–≥–¥–µ", "where"),
    ("–¥–µ–ª–æ", "matter, affair"), ("–µ—Å—Ç—å", "to be, to have (there is)"),
    ("—Ö–æ—Ä–æ—à–æ", "well, good"), ("–Ω–∞–¥–æ", "need to"), ("—Ç–æ–≥–¥–∞", "then"),
    ("—Å–µ–π—á–∞—Å", "now"), ("—Å–∞–º", "self"), ("—á—Ç–æ–±—ã", "in order to, so that"),
    ("—Ä–∞–∑", "time, once"), ("–¥–≤–∞", "two"), ("—Ç–∞–º", "there"), ("—á–µ–º", "than"),
    ("–≥–ª–∞–∑", "eye"), ("–∂–∏–∑–Ω—å", "life"), ("–ø–µ—Ä–≤—ã–π", "first"), ("–¥–µ–Ω—å", "day"),
    ("—Ç—É—Ç", "here"), ("–≤–æ", "in (variant of '–≤')"), ("–Ω–∏—á–µ–≥–æ", "nothing"),
    ("–ø–æ—Ç–æ–º", "then, later"), ("–æ—á–µ–Ω—å", "very"), ("—Å–æ", "with (variant of '—Å')"),
    ("—Ö–æ—Ç–µ—Ç—å", "to want"), ("–ª–∏—Ü–æ", "face"), ("–ø–æ—Å–ª–µ", "after"),
    ("–Ω–æ–≤—ã–π", "new"), ("–±–µ–∑", "without"), ("–≥–æ–≤–æ—Ä–∏—Ç—å", "to speak"),
    ("—Ö–æ–¥–∏—Ç—å", "to go (by foot, regularly)"), ("–¥—É–º–∞—Ç—å", "to think"),
    ("—Å–ø—Ä–æ—Å–∏—Ç—å", "to ask"), ("–≤–∏–¥–µ—Ç—å", "to see"), ("—Å—Ç–æ—è—Ç—å", "to stand")
]

# --- App Class ---
class VocabTrainerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Russisch Vokabeltrainer")
        self.limit = 10
        self.streak = 0
        self.record_streak = 0
        self.current_index = 0
        self.mode = tk.StringVar(value="input")
        self.cards = random.sample(vocab, self.limit)
        self.setup_ui()

    def setup_ui(self):
        tk.Label(self.root, text="Wie viele Karten m√∂chtest du lernen? (max 100)").pack()
        self.entry_limit = tk.Entry(self.root)
        self.entry_limit.insert(0, "10")
        self.entry_limit.pack()
        tk.Button(self.root, text="Start", command=self.start).pack(pady=10)

    def start(self):
        try:
            self.limit = min(100, int(self.entry_limit.get()))
            self.cards = random.sample(vocab, self.limit)
            self.current_index = 0
            self.streak = 0
            self.init_learning_ui()
        except ValueError:
            messagebox.showerror("Fehler", "Bitte eine g√ºltige Zahl eingeben.")

    def init_learning_ui(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        self.word_label = tk.Label(self.root, text="", font=("Arial", 20))
        self.word_label.pack(pady=10)

        self.entry_answer = tk.Entry(self.root, font=("Arial", 14))
        self.entry_answer.pack()

        self.choice_buttons = [tk.Button(self.root, text="", command=lambda i=i: self.check_choice(i)) for i in range(4)]
        for btn in self.choice_buttons:
            btn.pack(pady=2)

        self.check_btn = tk.Button(self.root, text="Antwort pr√ºfen", command=self.check_input)
        self.check_btn.pack(pady=5)

        self.sound_btn = tk.Button(self.root, text="üîä Aussprache", command=self.play_audio)
        self.sound_btn.pack(pady=5)

        self.mode_switch = tk.Button(self.root, text="Modus wechseln", command=self.switch_mode)
        self.mode_switch.pack(pady=5)

        self.status_label = tk.Label(self.root, text="Streak: 0 | Rekord: 0")
        self.status_label.pack(pady=10)

        self.show_card()

    def switch_mode(self):
        self.mode.set("choice" if self.mode.get() == "input" else "input")
        self.show_card()

    def show_card(self):
        ru, de = self.cards[self.current_index]
        self.word_label.config(text=ru)
        self.entry_answer.delete(0, tk.END)
        self.status_label.config(text=f"Streak: {self.streak} | Rekord: {self.record_streak}")

        if self.mode.get() == "choice":
            correct = de
            options = [correct] + [d for _, d in random.sample(vocab, 3) if d != correct]
            options = random.sample(options, k=4)
            for i, btn in enumerate(self.choice_buttons):
                btn.config(text=options[i], state=tk.NORMAL)
            self.entry_answer.pack_forget()
            self.check_btn.pack_forget()
            for btn in self.choice_buttons:
                btn.pack()
        else:
            for btn in self.choice_buttons:
                btn.pack_forget()
            self.entry_answer.pack()
            self.check_btn.pack()

    def check_input(self):
        ru, de = self.cards[self.current_index]
        user_input = self.entry_answer.get().strip().lower()
        if user_input in [d.strip().lower() for d in de.split(",")]:
            self.streak += 1
            self.record_streak = max(self.record_streak, self.streak)
        else:
            messagebox.showinfo("Falsch", f"Richtige Antwort: {de}")
            self.streak = 0
        self.next_card()

    def check_choice(self, i):
        ru, de = self.cards[self.current_index]
        if self.choice_buttons[i]['text'] == de:
            self.streak += 1
            self.record_streak = max(self.record_streak, self.streak)
        else:
            messagebox.showinfo("Falsch", f"Richtige Antwort: {de}")
            self.streak = 0
        self.next_card()

    def next_card(self):
        self.current_index += 1
        if self.current_index >= len(self.cards):
            messagebox.showinfo("Fertig", f"Du hast alle {self.limit} Karten ge√ºbt!")
            self.root.destroy()
        else:
            self.show_card()

    def play_audio(self):
        ru, _ = self.cards[self.current_index]
        tts = gTTS(text=ru, lang='ru')
        filename = "temp_audio.mp3"
        tts.save(filename)
        os.system(f"start {filename}" if os.name == "nt" else f"afplay {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = VocabTrainerApp(root)
    root.mainloop()