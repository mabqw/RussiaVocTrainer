import streamlit as st
import random
from gtts import gTTS
import matplotlib.pyplot as plt
import pandas as pd
import os
import json

# ---------------------------
# Konstante f√ºr Datei zur Fortschrittsspeicherung
# ---------------------------
PROGRESS_FILE = "progress.json"

# ---------------------------
# Vokabelliste (vollst√§ndig, mit "en" statt "de")
# ---------------------------
vocab = [
    {"ru": "–∏", "en": "and"},
    {"ru": "–≤", "en": "in"},
    {"ru": "–Ω–µ", "en": "not"},
    {"ru": "–æ–Ω", "en": "he"},
    {"ru": "–Ω–∞", "en": "on, at"},
    {"ru": "—è", "en": "I"},
    {"ru": "—á—Ç–æ", "en": "what, that"},
    {"ru": "—Ç–æ—Ç", "en": "that"},
    {"ru": "–±—ã—Ç—å", "en": "to be"},
    {"ru": "—Å", "en": "with"},
    {"ru": "–∞", "en": "but"},
    {"ru": "–≤–µ—Å—å", "en": "all"},
    {"ru": "—ç—Ç–æ", "en": "this, it"},
    {"ru": "–∫–∞–∫", "en": "how, like"},
    {"ru": "–æ–Ω–∞", "en": "she"},
    {"ru": "–ø–æ", "en": "along, by, according to"},
    {"ru": "–Ω–æ", "en": "but"},
    {"ru": "–æ–Ω–∏", "en": "they"},
    {"ru": "–∫", "en": "to"},
    {"ru": "—É", "en": "at, by"},
    {"ru": "—Ç—ã", "en": "you (informal)"},
    {"ru": "–∏–∑", "en": "from, out of"},
    {"ru": "–º—ã", "en": "we"},
    {"ru": "–∑–∞", "en": "behind, for"},
    {"ru": "–≤—ã", "en": "you (formal or plural)"},
    {"ru": "—Ç–∞–∫", "en": "so, thus"},
    {"ru": "–∂–µ", "en": "same, also"},
    {"ru": "–æ—Ç", "en": "from, of"},
    {"ru": "—Å–∫–∞–∑–∞—Ç—å", "en": "to say"},
    {"ru": "—ç—Ç–æ—Ç", "en": "this"},
    {"ru": "–∫–æ—Ç–æ—Ä—ã–π", "en": "which, who"},
    {"ru": "–º–æ—á—å", "en": "can, to be able"},
    {"ru": "—á–µ–ª–æ–≤–µ–∫", "en": "person"},
    {"ru": "–æ", "en": "about"},
    {"ru": "–æ–¥–∏–Ω", "en": "one"},
    {"ru": "–µ—â—ë", "en": "still, yet"},
    {"ru": "–±—ã", "en": "would"},
    {"ru": "—Ç–∞–∫–æ–π", "en": "such"},
    {"ru": "—Ç–æ–ª—å–∫–æ", "en": "only"},
    {"ru": "—Å–µ–±—è", "en": "oneself"},
    {"ru": "—Å–≤–æ—ë", "en": "one‚Äôs own"},
    {"ru": "–∫–∞–∫–æ–π", "en": "what kind, which"},
    {"ru": "–∫–æ–≥–¥–∞", "en": "when"},
    {"ru": "—É–∂–µ", "en": "already"},
    {"ru": "–¥–ª—è", "en": "for"},
    {"ru": "–≤–æ—Ç", "en": "here is, there is"},
    {"ru": "–∫—Ç–æ", "en": "who"},
    {"ru": "–¥–∞", "en": "yes"},
    {"ru": "–≥–æ–≤–æ—Ä–∏—Ç—å", "en": "to speak, say"},
    {"ru": "–≥–æ–¥", "en": "year"},
    {"ru": "–∑–Ω–∞—Ç—å", "en": "to know"},
    {"ru": "–º–æ–π", "en": "my"},
    {"ru": "–¥–æ", "en": "until, before"},
    {"ru": "–∏–ª–∏", "en": "or"},
    {"ru": "–µ—Å–ª–∏", "en": "if"},
    {"ru": "–≤—Ä–µ–º—è", "en": "time"},
    {"ru": "—Ä—É–∫–∞", "en": "hand"},
    {"ru": "–Ω–µ—Ç", "en": "no, not"},
    {"ru": "—Å–∞–º—ã–π", "en": "most, the very"},
    {"ru": "–Ω–∏", "en": "neither, nor"},
    {"ru": "—Å—Ç–∞—Ç—å", "en": "to become"},
    {"ru": "–±–æ–ª—å—à–æ–π", "en": "big"},
    {"ru": "–¥–∞–∂–µ", "en": "even"},
    {"ru": "–¥—Ä—É–≥–æ–π", "en": "other"},
    {"ru": "–Ω–∞—à", "en": "our"},
    {"ru": "–ø–æ–¥", "en": "under"},
    {"ru": "–≥–¥–µ", "en": "where"},
    {"ru": "–¥–µ–ª–æ", "en": "matter, affair"},
    {"ru": "–µ—Å—Ç—å", "en": "to be, to have (there is)"},
    {"ru": "—Ö–æ—Ä–æ—à–æ", "en": "well, good"},
    {"ru": "–Ω–∞–¥–æ", "en": "need to"},
    {"ru": "—Ç–æ–≥–¥–∞", "en": "then"},
    {"ru": "—Å–µ–π—á–∞—Å", "en": "now"},
    {"ru": "—Å–∞–º", "en": "self"},
    {"ru": "—á—Ç–æ–±—ã", "en": "in order to, so that"},
    {"ru": "—Ä–∞–∑", "en": "time, once"},
    {"ru": "–¥–≤–∞", "en": "two"},
    {"ru": "—Ç–∞–º", "en": "there"},
    {"ru": "—á–µ–º", "en": "than"},
    {"ru": "–≥–ª–∞–∑", "en": "eye"},
    {"ru": "–∂–∏–∑–Ω—å", "en": "life"},
    {"ru": "–ø–µ—Ä–≤—ã–π", "en": "first"},
    {"ru": "–¥–µ–Ω—å", "en": "day"},
    {"ru": "—Ç—É—Ç", "en": "here"},
    {"ru": "–≤–æ", "en": "in (variant of '–≤')"},
    {"ru": "–Ω–∏—á–µ–≥–æ", "en": "nothing"},
    {"ru": "–ø–æ—Ç–æ–º", "en": "then, later"},
    {"ru": "–æ—á–µ–Ω—å", "en": "very"},
    {"ru": "—Å–æ", "en": "with (variant of '—Å')"},
    {"ru": "—Ö–æ—Ç–µ—Ç—å", "en": "to want"},
    {"ru": "–ª–∏—Ü–æ", "en": "face"},
    {"ru": "–ø–æ—Å–ª–µ", "en": "after"},
    {"ru": "–Ω–æ–≤—ã–π", "en": "new"},
    {"ru": "–±–µ–∑", "en": "without"},
    {"ru": "–≥–æ–≤–æ—Ä–∏—Ç—å", "en": "to speak"},
    {"ru": "—Ö–æ–¥–∏—Ç—å", "en": "to go (by foot, regularly)"},
    {"ru": "–¥—É–º–∞—Ç—å", "en": "to think"},
    {"ru": "—Å–ø—Ä–æ—Å–∏—Ç—å", "en": "to ask"},
    {"ru": "–≤–∏–¥–µ—Ç—å", "en": "to see"},
    {"ru": "—Å—Ç–æ—è—Ç—å", "en": "to stand"}
]
# ---------------------------
# Hilfsfunktionen
# ---------------------------

def play_audio(text, lang="ru"):
    tts = gTTS(text, lang=lang)
    tts.save("audio.mp3")
    with open("audio.mp3", "rb") as audio_file:
        st.audio(audio_file.read(), format="audio/mp3")

def get_random_choices(correct, all_words, key):
    choices = [correct]
    while len(choices) < 4:
        word = random.choice(all_words)[key]
        if word not in choices:
            choices.append(word)
    random.shuffle(choices)
    return choices

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        try:
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                st.session_state.update(data)
        except (json.JSONDecodeError, IOError):
            pass

def save_progress():
    keys = ["index", "correct", "total", "streak", "best_streak", "history"]
    data = {k: st.session_state.get(k, 0) for k in keys}
    try:
        with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError:
        st.warning("‚ö†Ô∏è Fortschritt konnte nicht gespeichert werden.")

# ---------------------------
# Session State
# ---------------------------
if "initialized" not in st.session_state:
    st.session_state.index = 0
    st.session_state.correct = 0
    st.session_state.total = 0
    st.session_state.streak = 0
    st.session_state.best_streak = 0
    st.session_state.history = []
    load_progress()
    st.session_state.initialized = True

# ---------------------------
# UI: Einstellungen
# ---------------------------
st.title("üá∑üá∫ Russisch-Vokabeltrainer")

st.sidebar.title("Einstellungen")
num_cards = st.sidebar.slider("Wie viele Vokabeln lernen?", 5, len(vocab), 10)
mode = st.sidebar.radio("Lernmodus", ["Eingabe", "Multiple Choice"])
from_lang = st.sidebar.radio("Was wird gezeigt?", ["üá∑üá∫ Russisch", "üá¨üáß Englisch"])

if st.sidebar.button("üîÑ Statistik zur√ºcksetzen"):
    st.session_state.index = 0
    st.session_state.correct = 0
    st.session_state.total = 0
    st.session_state.streak = 0
    st.session_state.best_streak = 0
    st.session_state.history = []
    save_progress()
    st.rerun()

# ---------------------------
# Lernlogik
# ---------------------------
vocab_subset = vocab[:num_cards]
current_index = st.session_state.index % len(vocab_subset)
current_word = vocab_subset[current_index]

source = "ru" if from_lang == "üá∑üá∫ Russisch" else "en"
target = "en" if source == "ru" else "ru"

source_word = current_word.get(source, "[FEHLT]")
target_word = current_word.get(target, "[FEHLT]")

st.markdown(f"### {source_word}")
if st.button("üîä Aussprache anh√∂ren"):
    play_audio(source_word, lang=source)

if mode == "Eingabe":
    user_input = st.text_input("√úbersetzung eingeben:")
    if st.button("Pr√ºfen"):
        st.session_state.total += 1
        is_correct = user_input.strip().lower() == target_word.lower()
        if is_correct:
            st.success("‚úÖ Richtig!")
            st.session_state.correct += 1
            st.session_state.streak += 1
            st.session_state.best_streak = max(
                st.session_state.streak, st.session_state.best_streak
            )
        else:
            st.error(f"‚ùå Falsch. Richtig w√§re: {target_word}")
            st.session_state.streak = 0

        st.session_state.history.append(
            {"Frage": source_word, "Antwort": user_input, "Korrekt": is_correct}
        )
        st.session_state.index += 1
        save_progress()
        st.rerun()

elif mode == "Multiple Choice":
    correct_answer = current_word[target]

    if (
        "choices" not in st.session_state
        or st.session_state.get("last_index") != st.session_state.index
    ):
        choices = get_random_choices(current_word, vocab_subset, target)
        st.session_state.choices = choices
        st.session_state.selected_choice = None
        st.session_state.last_index = st.session_state.index

    try:
        default_index = st.session_state.choices.index(st.session_state.selected_choice)
    except (ValueError, TypeError):
        default_index = 0

    selected = st.radio(
        "W√§hle die richtige √úbersetzung:",
        st.session_state.choices,
        index=default_index,
        key="radio_choice",
    )
    st.session_state.selected_choice = selected

    if st.button("Antwort pr√ºfen"):
        st.session_state.total += 1
        is_correct = st.session_state.selected_choice == correct_answer

        if is_correct:
            st.success("‚úÖ Richtig!")
            st.session_state.correct += 1
            st.session_state.streak += 1
            st.session_state.best_streak = max(
                st.session_state.streak, st.session_state.best_streak
            )
        else:
            st.error(f"‚ùå Falsch. Richtig w√§re: {correct_answer}")
            st.session_state.streak = 0

        st.session_state.history.append(
            {
                "Frage": source_word,
                "Antwort": st.session_state.selected_choice,
                "Korrekt": is_correct,
            }
        )
        st.session_state.index += 1
        st.session_state.pop("choices", None)
        st.session_state.pop("selected_choice", None)
        save_progress()
        st.rerun()

    try:
        default_index = st.session_state.choices.index(st.session_state.selected_choice)
    except (ValueError, TypeError):
        default_index = 0

    selected = st.radio(
        "W√§hle die richtige √úbersetzung:",
        st.session_state.choices,
        index=default_index,
        key="radio_choice",
    )
    st.session_state.selected_choice = selected

    if st.button("Antwort pr√ºfen"):
        st.session_state.total += 1
        is_correct = st.session_state.selected_choice == correct_answer

        if is_correct:
            st.success("‚úÖ Richtig!")
            st.session_state.correct += 1
            st.session_state.streak += 1
            st.session_state.best_streak = max(
                st.session_state.streak, st.session_state.best_streak
            )
        else:
            st.error(f"‚ùå Falsch. Richtig w√§re: {correct_answer}")
            st.session_state.streak = 0

        st.session_state.history.append(
            {
                "Frage": source_word,
                "Antwort": st.session_state.selected_choice,
                "Korrekt": is_correct,
            }
        )
        st.session_state.index += 1
        st.session_state.pop("choices", None)
        st.session_state.pop("selected_choice", None)
        save_progress()
        st.rerun()

# ---------------------------
# Fortschritt & Statistik
# ---------------------------
st.sidebar.markdown(
    f"**Fortschritt**: {st.session_state.correct}/{st.session_state.total} korrekt"
)
st.sidebar.markdown(f"üî• Streak: {st.session_state.streak}")
st.sidebar.markdown(f"üèÜ Rekord: {st.session_state.best_streak}")

if st.sidebar.checkbox("üìà Fortschrittsgraph anzeigen") and st.session_state.history:
    df = pd.DataFrame(st.session_state.history)
    df["Gesamt"] = df.index + 1
    df["Richtig"] = df["Korrekt"].cumsum()

    fig, ax = plt.subplots()
    ax.plot(df["Gesamt"], df["Richtig"], marker="o")
    ax.set_xlabel("Gesamtversuche")
    ax.set_ylabel("Richtige Antworten")
    ax.set_title("Lernfortschritt")
    st.sidebar.pyplot(fig)

# ---------------------------
# Vokabel-Tabelle in Sidebar
# ---------------------------
if st.sidebar.checkbox("üìö Vokabeltabelle anzeigen"):
    st.sidebar.dataframe(pd.DataFrame(vocab_subset))
